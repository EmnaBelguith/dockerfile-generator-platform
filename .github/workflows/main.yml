# .github/workflows/main.yml
# Nom du workflow qui apparaîtra dans l'onglet "Actions" de GitHub
name: Docker Build, Push and Minimal Test Flask App

# Déclencheurs du workflow
on:
  push:
    branches:
      - main
  workflow_dispatch:

# Définition des jobs (tâches) à exécuter
jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          IMAGE_NAME=emna1belghith/python-docker-app
          IMAGE_TAG=${{ github.sha }} 
          
          docker build -t $IMAGE_NAME:$IMAGE_TAG .
          docker push $IMAGE_NAME:$IMAGE_TAG
          
          docker tag $IMAGE_NAME:$IMAGE_TAG $IMAGE_NAME:latest
          docker push $IMAGE_NAME:latest

  # Nouveau job : Tester l'image Docker de manière minimale
  test-image:
    needs: build-and-publish # Ce job ne s'exécute que si le job précédent a réussi
    runs-on: ubuntu-latest

    steps:
      - name: Pull Docker image
        run: |
          IMAGE_NAME=emna1belghith/python-docker-app
          IMAGE_TAG=${{ github.sha }}
          docker pull $IMAGE_NAME:$IMAGE_TAG
          echo "Image $IMAGE_NAME:$IMAGE_TAG pulled successfully."

      - name: Run Docker container (Minimal Test)
        id: run_container 
        run: |
          IMAGE_NAME=emna1belghith/python-docker-app
          IMAGE_TAG=${{ github.sha }}
          # Mappe le port 8080 du runner au port 5000 du conteneur (où Flask écoute)
          # Le test minimal consiste à vérifier que le conteneur démarre sans erreur immédiate.
          docker run -d --name test-app -p 8080:5000 $IMAGE_NAME:$IMAGE_TAG
          echo "Conteneur 'test-app' démarré sur le port 8080 du runner (mappé au port 5000 du conteneur)."
          
          # Attendre un court instant pour que l'application ait le temps de démarrer
          # Ceci n'est PAS une vérification de santé, juste une pause.
          echo "Attente de 5 secondes pour le démarrage initial de l'application..."
          sleep 5
          echo "Vérification minimale terminée."


      - name: Clean up Docker container
        if: always() # S'exécute toujours, même si les étapes précédentes échouent
        run: |
          echo "Arrêt et suppression du conteneur 'test-app'..."
          docker stop test-app || true 
          docker rm test-app || true
          echo "Conteneur nettoyé."
